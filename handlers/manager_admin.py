# handlers/manager_admin.py
import asyncio
from typing import Optional
from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.enums import ChatType
from config import MANAGER_IDS
from db import get_chat_status_msg, sqlite_checkpoint, sqlite_backup_once, list_chats_like,\
      set_selection, list_open_invoices_with_state, get_selection,\
      set_chat_status_msg
from utils import edit_message, escape_html
from datetime import datetime
from kb import MANAGER_RK
from aiogram.exceptions import TelegramBadRequest

def setup(dp: Dispatcher, bot: Bot) -> None:
    dp.message.register(db_backup_now, Command("db_backup"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(cmd_broadcast, Command("broadcast"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(cmd_list_chats, Command("list_chats"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(cmd_select_chat, Command("select_chat"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(cmd_where, Command("where"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(cmd_start, Command("start"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(cmd_ping, Command("ping"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(cmd_invoices, Command("invoices"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(cmd_menu, Command("menu"), F.chat.type == ChatType.PRIVATE)
    dp.message.register(cmd_hide, Command("hide"), F.chat.type == ChatType.PRIVATE)

async def cmd_ping(message: Message):
        if message.from_user.id in MANAGER_IDS:
            await message.answer("pong")

async def db_backup_now(message: Message):
    if message.from_user.id not in MANAGER_IDS:
        return
    try:
        await sqlite_checkpoint()
        path = await sqlite_backup_once()
        await message.answer(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {escape_html(str(path))}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {escape_html(str(e))}")

async def cmd_broadcast(message: Message, command: CommandObject):
    if message.from_user.id not in MANAGER_IDS:
        return
    raw = (command.args or "").strip()
    if not raw:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/broadcast all <—Ç–µ–∫—Å—Ç>\n"
            "/broadcast <chat_id> <—Ç–µ–∫—Å—Ç>\n"
            "/broadcast <—á–∞—Å—Ç—å_–Ω–∞–∑–≤–∞–Ω–∏—è> <—Ç–µ–∫—Å—Ç>"
        )
        return
    key, _, text = raw.partition(" ")
    text = text.strip()
    if not text:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞.")
        return
    targets: list[int] = []
    if key.lower() == "all":
        rows = await list_chats_like(None)
        targets = [r[0] for r in rows]
    elif key.lstrip("-").isdigit():
        targets = [int(key)]
    else:
        rows = await list_chats_like(key)
        if not rows:
            await message.answer("–ü–æ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–µ —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        targets = [r[0] for r in rows]

    sent = failed = 0
    errors = []
    for cid in targets:
        try:
            await message.bot.send_message(chat_id=cid, text=text)
            sent += 1
        except Exception as e:
            failed += 1
            errors.append(f"{cid}: {e}")
        await asyncio.sleep(0.05)
    msg = f"üì£ –ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}."
    if failed and errors:
        tail = "\n".join(errors[:5])
        msg += f"\n\n–ü–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏:\n{tail}" + ("‚Ä¶–µ—â—ë –µ—Å—Ç—å –æ—à–∏–±–∫–∏" if len(errors) > 5 else "")
    await message.answer(msg)

async def cmd_list_chats(message: Message):
    if message.from_user.id not in MANAGER_IDS:
        return
    q = (message.text or "").split(maxsplit=1)
    query = q[1] if len(q) > 1 else None
    rows = await list_chats_like(query)
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–∞–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    lines = ["üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:"]
    for chat_id, title, username, type_ in rows:
        title_disp = title or "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"
        uname = f"@{username}" if username else ""
        lines.append(f"‚Ä¢ {escape_html(title_disp)} {uname} (id={chat_id}, {type_})")
    await message.answer("\n".join(lines))

async def cmd_select_chat(message: Message, command: CommandObject):
    if message.from_user.id not in MANAGER_IDS:
        return
    arg = (command.args or "").strip()
    if not arg:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è, @username –∏–ª–∏ id: /select_chat <–∏–º—è|@username|id>")
        return
    chosen: Optional[int] = None
    if arg.lstrip("-").isdigit():
        chosen = int(arg)
    else:
        rows = await list_chats_like(arg.lstrip("@"))
        if len(rows) == 1:
            chosen = rows[0][0]
        elif len(rows) > 1:
            for chat_id, title, username, _ in rows:
                if (title and title.lower() == arg.lower()) or (username and f"@{username.lower()}" == arg.lower().lstrip()):
                    chosen = chat_id
                    break
            if not chosen:
                preview = "\n".join(
                    f"‚Ä¢ {(t or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)')} @{u if u else ''} (id={cid})" for cid, t, u, _ in rows[:10]
                )
                await message.answer("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.\n\n" + preview)
                return
        else:
            await message.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
    await set_selection(message.from_user.id, chosen)

    row = await get_chat_status_msg(message.from_user.id)
    message_id = row[0]
    chat_id = row[1]
    try:
        await edit_message(message.bot, chat_id, message_id, text = f'–¢–µ–∫—É—â–∏–π —á–∞—Ç id={chosen}.–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è.')
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            return
        
    await message.answer(f"‚úî –í—ã–±—Ä–∞–Ω —á–∞—Ç id={chosen}. /where ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.")

async def cmd_where(message: Message):
    if message.from_user.id not in MANAGER_IDS:
        return
    sel = await get_selection(message.from_user.id)
    if not sel:
        await message.answer("–¶–µ–ª–µ–≤–æ–π —á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_chat.")
        return
    try:
        ch = await message.bot.get_chat(sel)
        await message.answer(f"üéØ –¢–µ–∫—É—â–∏–π —á–∞—Ç: {ch.title or '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'} (id={sel})")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç id={sel}: {e}")

async def cmd_start(message: Message):
    if message.from_user.id not in MANAGER_IDS:
        if message.chat.type == ChatType.PRIVATE:
            await message.answer("üëã –≠—Ç–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í –≥—Ä—É–ø–ø–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support –∏–ª–∏ —Ç–µ–≥ –±–æ—Ç–∞.")
        return
    

    text = (
        "üëã –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—É—â–µ–Ω.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /invoices ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ /list_chats ‚Äî —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
        "‚Ä¢ /select_chat &lt;–∏–º—è|@username|id&gt; ‚Äî –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç\n"
        "‚Ä¢ /where ‚Äî —Ç–µ–∫—É—â–∏–π —á–∞—Ç\n"
        "‚Ä¢ /broadcast ‚Ä¶ ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞\n"
        "‚Ä¢ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏, /hide ‚Äî —Å–∫—Ä—ã—Ç—å\n"
    )
    await message.answer(text, reply_markup=MANAGER_RK)

    sel = await get_selection(message.from_user.id)
    if not sel:
        sent = await message.answer('–¢–µ–∫—É—â–∏–π —á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /select_chat.')
    ch = await message.bot.get_chat(sel)
    sent = await message.answer(f'–¢–µ–∫—É—â–∏–π —á–∞—Ç {ch.title}. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è.')
    await set_chat_status_msg(message.from_user.id, message.chat.id, sent.message_id)
    
    

def _fmt_ts(ts: int) -> str:
    try:
        return datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M")
    except Exception:
        return str(ts)

async def cmd_invoices(message: Message):
    if message.from_user.id not in MANAGER_IDS:
        return
    items = await list_open_invoices_with_state(limit=30)
    if not items:
        await message.answer("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.")
        return

    lines = ["üßæ <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏</b>:"]
    for it in items:
        done = " ¬∑ ".join(it["done"]) if it["done"] else "‚Äî"
        left = " ¬∑ ".join(it["remaining"]) if it["remaining"] else "‚Äî"
        lines.append(
            f"‚Ä¢ #{it['id']} ‚Äî —Å—Ç–∞—Ç—É—Å: <code>{it['status']}</code>\n"
            f"  —á–∞—Ç: <code>{it['chat_id']}</code>, —Å–æ–∑–¥–∞–Ω–æ: { _fmt_ts(it['created_ts']) }\n"
            f"  —Å–¥–µ–ª–∞–Ω–æ: {done}\n"
            f"  –æ—Å—Ç–∞–ª–æ—Å—å: {left}"
        )
    await message.answer("\n".join(lines))


async def cmd_menu(message: Message):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    if not message.from_user or message.from_user.id not in MANAGER_IDS:
        return
    await message.answer("–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ.", reply_markup=MANAGER_RK)

async def cmd_hide(message: Message):
    if not message.from_user or message.from_user.id not in MANAGER_IDS:
        return
    await message.answer("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ.", reply_markup=ReplyKeyboardRemove())
